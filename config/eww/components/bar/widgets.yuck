;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Widget Sections
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Dashboard
(defwidget dashboard []
    (box    :orientation "v"
            :class "dashboard"
            :space-evenly "false"
    (eventbox   :cursor "pointer"
        (button :class "button-dashboard"
                :onclick "echo hi" ""))))

        
; Launcher
(defwidget launcher []
    (box    :orientation "v"
            :class "container-apps"
        (box    :orientation "v"
                :class "launcher"
                :space-evenly "false"
        (eventbox   :cursor "pointer"
            (button :class "button-launcher"
                    :onclick "${launcher}" "󰑣")))))

; Clipboard
(defwidget clip []
    (box    :orientation "v"
            :class "container-apps"
        (box    :orientation "v"
                :class "clip"
                :space-evenly "false"
        (eventbox   :cursor "pointer"
            (button :class "button-clip"
                    :onclick "eww open --toggle clipboard"
					:onrightclick "eww open clipboard-input" "")))))

; Screencast
(defwidget cast []
    (box    :orientation "v"
            :class "container-apps"
        (box    :orientation "v"
                :class "cast"
                :space-evenly "false"
        (eventbox   :cursor "pointer"
            (button :class "button-cast"
                    :onclick "eww open-many screencast-closer screencast" "")))))

; Screencast
(defwidget tswitch []
    (box    :orientation "v"
            :class "container-apps"
        (box    :orientation "v"
                :class "tswitch"
                :space-evenly "false"
        (eventbox   :cursor "pointer"
            (button :class "button-tswitch"
                    :onclick "eww open-many tswitch-question-closer tswitch-question" "")))))

; Workspace
(defwidget workspace []
    (box    :orientation "v"
            :class "container-workspace"
    (literal    :content workspace)))
(deflisten workspace "$HOME/.config/eww/scripts/workspace")
    
; Brightness control
(defwidget brightness []
    (box    :orientation "v"
            :class "container"
        (eventbox   :onhover "${eww} update brightness=true"
                    :onhoverlost "${eww} update brightness=false"
            (box    :orientation "v"
                    :class "brightness"
		            :space-evenly "false"
            (revealer   :transition "slideup"
                        :reveal brightness
                        :duration "550ms"
	        (scale  :class "bar-brightness"
                    :value current-brightness
                    :orientation "v"
                    :flipped true
                    :max 101
                    :min 0
                    :onchange "brightnessctl set {}%"))
	        (button :onclick "echo hi"
                    :class "button-brightness" "")))))
(defpoll current-brightness :interval "1s" "brightnessctl info | grep 'Current brightness' | awk '{print $4}' | tr -d '()%'")
(defvar brightness false)

; Volume control
(defwidget volume []
    (box    :orientation "v"
            :class "container"
        (eventbox   :onhover "${eww} update volume=true"
                    :onhoverlost "${eww} update volume=false"
            (box    :orientation "v"
                    :class "volume"
                    :space-evenly "false"
            (revealer   :transition "slideup"
                        :reveal volume
                        :duration "550ms"
            (scale  :class "bar-volume"
                    :value current-volume
                    :orientation "v"
                    :flipped true
                    :max 101
                    :min 0
                    :onchange "wpctl set-volume @DEFAULT_SINK@ {}%"))
            (button :onclick "echo hi"
                    :class "button-volume" "")))))
(defpoll current-volume :interval "1s"  "pactl get-sink-volume @DEFAULT_SINK@ | awk '{print $5}' | sed 's/%//g'")
(defvar volume false)

; Wireless status
(defwidget wireless []
    (box    :orientation "v"
            :class "container"
	    (box    :orientation "v"
                :class "wireless"
                :space-evenly "false"
	    (button :onclick "echo yaa"
                :class "button-wireless" wireless-icon))))
(defpoll wireless-icon :interval "1s" "$HOME/.config/eww/scripts/wireless icon")
    
; Battery status
(defwidget battery []
    (box    :orientation "v"
            :class "container"
        (box    :orientation "v"
                :class "battery"
                :space-evenly "false"
        (button :onclick "echo yaaa"
                :class "button-battery" battery-icon))))
(defpoll battery-icon :interval "1s" "$HOME/.config/eww/scripts/battery icon")
    
; Clock
(defwidget clock []
    (eventbox	 :onclick "eww open --toggle calendar"
	(box		 :orientation "v"
				 :class "clock"
				 (label		 :class "clock-hour"
				 			 :text hour)
				 (label		 :class "clock-min"
				 			 :text min))))
(defpoll hour	:interval "1s" "date '+%H'")
(defpoll min	:interval "1s" "date '+%M'")

; Bar
(defwidget bar []
	(box    :class "eww_bar" 
		    :orientation "v" 
		    :vexpand "false" 
		    :hexpand "false"
(top)
(bottom)))
(defwidget top []       ; top modules
    (box    :orientation "v"
            :space-evenly "false"
            :valign "start"
(dashboard)(launcher)(clip)(cast)(tswitch)))
(defwidget bottom []    ; bottom modules
    (box    :orientation "v"
            :space-evenly "false"
            :valign "end"
(workspace)(brightness)(volume)(wireless)(battery)(clock)))